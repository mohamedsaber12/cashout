stages:
  - lint-test
  - requirements-dependency_scanning         
  - dependency_check
  - coverage-test
  - sonarqube


lint_test:
  image: python:3.8.0-slim
  stage: lint-test
  before_script:
    - pip install flake8-html
  script:
    - flake8 --format=html --htmldir=flake_reports/
  allow_failure: true  
  artifacts:
    when: always
    paths:
      - flake_reports/


requirements-dependency_scanning:
  image: python:3.7
  stage: requirements-dependency_scanning
  before_script:
    - apt-get update -y
    - pip install safety
  script:
    - safety check -r requirements/requirements.txt
    - safety check -r requirements/base.txt
  allow_failure: true

owasp_dependency_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: dependency_check
  script:
    
    - /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --enableExperimental
     
  allow_failure: true
  artifacts:
    when: always
    paths:
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"
      - "./dependency-check-report.xml"

coverage-test:
  stage: coverage-test
  tags:
    #- docker-runner-1
  image: docker/compose:alpine-1.29.2
  before_script:
    - export DOCKER_HOST="ssh://coverage@3.138.165.122"
    - apk add --no-cache openssh-client curl bash 
    - echo $(whoami)                  
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$coverage_private_key" | tr -d '\r' | ssh-add -
    - ssh-keyscan 3.138.165.122 >> ~/.ssh/known_hosts && chmod 0644 ~/.ssh/known_hosts
  script:
    - cd /home/coverage/payout-staging
    - docker-compose up -d --build
    - docker-compose exec payouts coverage run --source=users,data,disbursement,payment,instant_cashin,utilities manage.py test
    #- docker-compose exec payouts coverage report
    - docker-compose exec payouts coverage xml
    - docker-compose down --volumes
    - docker container prune --force
  allow_failure: true
  artifacts:
    when: always
    paths:
      - "./coverage.xml"


sonarqube-check:  
  stage: sonarqube
  tags:
    - docker-runner-1
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
    GIT_DEPTH: "0"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -Dsonar.projectKey=Payouts -Dsonar.qualitygate.wait=true -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.dependencyCheck.htmlReportPath=./dependency-check-report.html
  allow_failure: true
  only:
    - merge_requests
    - master 
    - new-staging
    - staging
