# Generated by Django 2.2.12 on 2020-11-02 14:46

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import users.models.admin
import users.models.base_user
import users.models.checker
import users.models.instant_api_checker
import users.models.instant_api_viewer
import users.models.maker
import users.models.root
import users.models.support
import users.models.uploader
import users.models.upmaker


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile_no', models.CharField(max_length=16, verbose_name='Mobile Number')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(0, 'Super'), (1, 'Maker'), (2, 'Checker'), (3, 'Root'), (4, 'Uploader'), (5, 'UpMaker'), (6, 'InstantAPIChecker'), (7, 'InstantAPIViewer'), (8, 'Support')], default=0)),
                ('hierarchy', models.PositiveSmallIntegerField(db_index=True, default=0, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('pin', models.CharField(default=False, max_length=128, null=True, verbose_name='pin')),
                ('avatar_thumbnail', imagekit.models.fields.ProcessedImageField(default='avatars/user.png', null=True, upload_to='avatars')),
                ('title', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('is_totp_verified', models.BooleanField(default=False, null=True)),
                ('wallet_fees_profile', models.CharField(blank=True, default='', max_length=15, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-id', '-hierarchy'],
                'permissions': (('can_disable_two_factor', 'the user can disable two factor'), ('can_use_two_factor_backup', 'the user can use two factor backup tokens'), ('can_use_two_factor', 'the user can use two factor'), ('has_disbursement', 'the client has disbursement options'), ('has_collection', 'the client has collection options'), ('has_instant_disbursement', 'the client/his children has instant disbursement capabilities'), ('can_view_api_docs', 'the user can view the api documentation'), ('vodafone_default_onboarding', 'the onboarding will be the old one at the super admin and the admin'), ('instant_model_onboarding', 'the onboarding of an instant entity will be only for the mandatory setups'), ('accept_vodafone_onboarding', 'the new vf & accept business model of no direct calls to the wallets')),
            },
            managers=[
                ('objects', users.models.base_user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, max_length=20, null=True)),
                ('logo', imagekit.models.fields.ProcessedImageField(default='entities_logo/pm_name.png', null=True, upload_to='entities_logo')),
                ('mail_subject', models.CharField(blank=True, default='Payouts', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Setup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pin_setup', models.BooleanField(default=False)),
                ('levels_setup', models.BooleanField(default=False)),
                ('maker_setup', models.BooleanField(default=False)),
                ('checker_setup', models.BooleanField(default=False)),
                ('category_setup', models.BooleanField(default=False)),
                ('uploaders_setup', models.BooleanField(default=False)),
                ('format_collection_setup', models.BooleanField(default=False)),
                ('collection_setup', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_amount_can_be_disbursed', models.FloatField(default=0, verbose_name='Max amount can be disbursed')),
                ('level_of_authority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4')], null=True)),
                ('created', models.ForeignKey(help_text='Root user who created the levels, and have the ability to modify their values.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('max_amount_can_be_disbursed',),
            },
        ),
        migrations.AddField(
            model_name='user',
            name='brand',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.Brand'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='level',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.Levels'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='CheckerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.checker.CheckerManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstantAPICheckerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.instant_api_checker.InstantAPICheckerManager()),
            ],
        ),
        migrations.CreateModel(
            name='InstantAPIViewerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.instant_api_viewer.InstantAPIViewerManager()),
            ],
        ),
        migrations.CreateModel(
            name='MakerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.maker.MakerManager()),
            ],
        ),
        migrations.CreateModel(
            name='RootUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.root.RootManager()),
            ],
        ),
        migrations.CreateModel(
            name='SuperAdminUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.admin.AdminManager()),
            ],
        ),
        migrations.CreateModel(
            name='SupportUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.support.SupportManager()),
            ],
        ),
        migrations.CreateModel(
            name='UploaderUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.uploader.UploaderManager()),
            ],
        ),
        migrations.CreateModel(
            name='UpmakerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.upmaker.UpmakerManager()),
            ],
        ),
        migrations.CreateModel(
            name='SupportSetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_onboard_entities', models.BooleanField(default=False, verbose_name='Can On-board Entities?')),
                ('support_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='my_setups', to='users.SupportUser', verbose_name='Support User')),
                ('user_created', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_setups', to='users.SuperAdminUser', verbose_name='Super Admin User')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='EntitySetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agents_setup', models.BooleanField(default=False, verbose_name='Is agent setup completed for the entity?')),
                ('fees_setup', models.BooleanField(default=False, verbose_name='Is fees setup completed for the entity?')),
                ('is_normal_flow', models.BooleanField(default=True, verbose_name='Is the regular Vodafone flow setup/disb?')),
                ('entity', models.OneToOneField(help_text='Root user, the admin of the entity', on_delete=django.db.models.deletion.CASCADE, related_name='root_entity_setups', to='users.RootUser')),
                ('user', models.ForeignKey(help_text='The owner who on-board entities. ex: PayMob', on_delete=django.db.models.deletion.CASCADE, related_name='entity_setups', to='users.SuperAdminUser', verbose_name='SuperAdmin')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('fees_percentage', models.PositiveSmallIntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100)])),
                ('custom_profile', models.CharField(blank=True, default=False, help_text='Custom profile name/constant ONLY for clients with custom budgets', max_length=50, null=True)),
                ('client', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client', to='users.RootUser')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients', to='users.SuperAdminUser')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
    ]
